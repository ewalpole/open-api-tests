{
  "swagger": "2.0",
  "host": "cc-api-behance.adobe.io",
  "basePath": "/v2",
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "Users"
    },
    {
      "name": "Work in Progress"
    },
    {
      "name": "Projects"
    },
    {
      "name": "Project Editor"
    },
    {
      "name": "Collections"
    },
    {
      "name": "Activity Feed"
    },
    {
      "name": "Galleries"
    },
    {
      "name": "Public Profile Service"
    },
    {
      "name": "CCN"
    },
    {
      "name": "Notifications"
    },
    {
      "name": "Onboarding"
    },
    {
      "name": "Fields"
    },
    {
      "name": "Teams"
    },
    {
      "name": "Upload"
    },
    {
      "name": "For You"
    },
    {
      "name": "Creatives to Follow"
    },
    {
      "name": "Live"
    },
    {
      "name": "Locations"
    },
    {
      "name": "Moderation"
    },
    {
      "name": "Adobe Talent"
    }
  ],
  "info": {
    "title": "Behance API V2 Documentation",
    "description": "Access the data behind millions of creative projects and users.",
    "termsOfService": "https://www.adobe.com/legal/terms.html",
    "version": "2.0.0",
    "contact": {
      "name": "Behance API Team",
      "email": "api@behancenetwork.zendesk.com"
    }
  },
  "paths": {
    "/activity": {
      "get": {
        "x-category": "Activity Feed",
        "tags": [
          "Activity Feed"
        ],
        "operationId": "getActivityFeed",
        "summary": "Get a user's activity feed",
        "description": "Get the authenticated user's activity feed.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "activity": {
                  "$ref": "#/definitions/ActivityFeed"
                }
              }
            }
          }
        }
      }
    },
    "/activity/since": {
      "get": {
        "x-category": "Activity Feed",
        "tags": [
          "Activity Feed"
        ],
        "operationId": "getActivityFeedSince",
        "summary": "Get a user's feed by timestamp",
        "description": "Get the authenticated user's activity feed from the specified timestamp forward.",
        "parameters": [
          {
            "name": "onset_ts",
            "in": "query",
            "description": "Unix timestamp describing the time from which to fetch the activity feed.",
            "example": 1530322157
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "activity": {
                  "$ref": "#/definitions/ActivityFeed"
                }
              }
            }
          }
        }
      }
    },
    "/ccn/{networkId}/member": {
      "get": {
        "x-category": "CCN",
        "tags": [
          "CCN"
        ],
        "operationId": "getCCNMemberStatus",
        "summary": "Get membership status",
        "description": "Get membership status of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/NetworkIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "is_member": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "CCN",
        "tags": [
          "CCN"
        ],
        "operationId": "postCCNMemberStatus",
        "summary": "Add a new CCN member",
        "description": "Add the authenticated user to the CCN.",
        "parameters": [
          {
            "$ref": "#/parameters/NetworkIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "joined": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "CCN",
        "tags": [
          "CCN"
        ],
        "operationId": "deleteCCNMemberStatus",
        "summary": "Delete a CCN membership",
        "description": "Remove the authenticated user from the CCN.",
        "parameters": [
          {
            "$ref": "#/parameters/NetworkIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "removed": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/collections": {
      "get": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "getCollections",
        "summary": "Search and filter collections",
        "description": "Search and filter collections.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "collections": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Collection"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "postCollections",
        "summary": "Create a collection",
        "description": "Create a collection of projects.",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "title",
            "type": "string",
            "required": true,
            "description": "The title of the collection to be created.",
            "x-example": "Best Coffee and Pie Spots"
          },
          {
            "in": "formData",
            "name": "projects",
            "type": "string",
            "description": "A pipe delimited string of integer project IDs to add to the collection.",
            "x-example": "123|456|789"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "collection": {
                  "$ref": "#/definitions/Collection"
                },
                "projects": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "description": "An array of project IDs added to the collection",
                      "example": [
                        123,
                        456,
                        789
                      ],
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400LegacyValidationErrors"
          }
        }
      }
    },
    "/collections/{collectionId}": {
      "get": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "getCollection",
        "summary": "Get a single collection",
        "description": "Get a single collection.",
        "parameters": [
          {
            "$ref": "#/parameters/CollectionIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "collection": {
                  "$ref": "#/definitions/Collection"
                }
              }
            }
          }
        }
      },
      "put": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "putCollection",
        "summary": "Update a collection",
        "description": "Update a collection.",
        "parameters": [
          {
            "$ref": "#/parameters/CollectionIdRequiredInPath"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "title",
            "required": true,
            "description": "The collection's title",
            "x-example": "Best Coffee and Pie Spots"
          },
          {
            "in": "formData",
            "type": "string",
            "name": "privacy",
            "description": "The collection's privacy setting.",
            "x-example": "private",
            "enum": [
              "private",
              "public"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "collection": {
                  "$ref": "#/definitions/Collection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400LegacyValidationErrors"
          }
        }
      },
      "delete": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "deleteCollection",
        "summary": "Delete a collection",
        "description": "Delete a collection.",
        "parameters": [
          {
            "$ref": "#/parameters/CollectionIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collectionId}/projects": {
      "get": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "getCollectionProjects",
        "summary": "List projects",
        "description": "List projects belonging to the specified collection.",
        "parameters": [
          {
            "$ref": "#/parameters/CollectionIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projects": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Projects"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "postCollectionProjects",
        "summary": "Add projects to a collection",
        "description": "Add projects to a collection.",
        "parameters": [
          {
            "$ref": "#/parameters/CollectionIdRequiredInPath"
          },
          {
            "in": "formData",
            "name": "projects",
            "required": true,
            "type": "string",
            "description": "A pipe delimited string of integer project IDs",
            "x-example": "123|456|789"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400LegacyValidationErrors"
          }
        }
      }
    },
    "/collections/{collectionId}/projects/{projectId}": {
      "delete": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "deleteCollectionProject",
        "summary": "Remove project from collection",
        "description": "Remove a project from a collection.",
        "parameters": [
          {
            "$ref": "#/parameters/CollectionIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "removed": {
                  "type": "boolean",
                  "example": true
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collectionId}/coowners": {
      "get": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "getCollectionCoowners",
        "summary": "List owners",
        "description": "List the owners of the collection.",
        "parameters": [
          {
            "$ref": "#/parameters/CollectionIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "postCollectionCoowners",
        "summary": "Add an owner",
        "description": "Add an owner to the collection.",
        "parameters": [
          {
            "$ref": "#/parameters/CollectionIdRequiredInPath"
          },
          {
            "in": "formData",
            "description": "The integer user ID to add as a collection owner.",
            "required": true,
            "name": "coowner",
            "type": "integer",
            "x-example": 163039
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400LegacyValidationErrors"
          }
        }
      }
    },
    "/collections/{collectionId}/coowners/{userId}": {
      "delete": {
        "x-category": "Collections",
        "tags": [
          "Collections"
        ],
        "operationId": "deleteCollectionCoowner",
        "summary": "Remove an owner",
        "description": "Remove an owner from the collection.",
        "parameters": [
          {
            "$ref": "#/parameters/CollectionIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/creativestofollow": {
      "get": {
        "x-category": "Creatives to Follow",
        "tags": [
          "Creatives to Follow"
        ],
        "operationId": "getCreativesToFollow",
        "summary": "Get a list of top users",
        "description": "Get a list of top users.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "creatives_to_follow": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fields": {
      "get": {
        "x-category": "Fields",
        "tags": [
          "Fields"
        ],
        "operationId": "getFields",
        "summary": "Get creative fields",
        "description": "Retrieve a full list of creative fields.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "fields": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CreativeField"
                  }
                },
                "popular": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CreativeField"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/foryou/projects": {
      "get": {
        "x-category": "For You",
        "tags": [
          "For You"
        ],
        "operationId": "getForYouProjects",
        "summary": "Get recommended projects",
        "description": "Get recommended projects for the authenticated user.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": true,
            "type": "string",
            "example": "recommended",
            "enum": [
              "new",
              "recommended"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "The number of projects to return per page.",
            "example": 2,
            "minimum": 1,
            "maximum": 12
          },
          {
            "name": "styles",
            "in": "query",
            "description": "Set to 1 to include project styles with each result.",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "appreciated",
            "in": "query",
            "description": "Set to 1 to include the authenticated user's appreciation status with each result.",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "colors",
            "in": "query",
            "description": "Set to 1 to include project colors data with each result.",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "featured_on",
            "in": "query",
            "description": "Set to 1 to include project feature data with each result.",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "card",
            "in": "query",
            "description": "Set to 1 to receive a limited representation of the user.",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projects": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Project"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/galleries": {
      "get": {
        "x-category": "Galleries",
        "tags": [
          "Galleries"
        ],
        "operationId": "getGalleries",
        "summary": "List galleries",
        "description": "List galleries.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "categories": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CuratedGallery"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/galleries/{galleryId}": {
      "get": {
        "x-category": "Galleries",
        "tags": [
          "Galleries"
        ],
        "operationId": "getGallery",
        "summary": "Get a single gallery",
        "description": "Get a single gallery.",
        "parameters": [
          {
            "$ref": "#/parameters/GalleryIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "gallery": {
                  "$ref": "#/definitions/CuratedGallery"
                }
              }
            }
          }
        }
      }
    },
    "/galleries/{galleryId}/follow": {
      "post": {
        "x-category": "Galleries",
        "tags": [
          "Galleries"
        ],
        "operationId": "postGalleryFollow",
        "summary": "Follow a gallery",
        "description": "Follow a gallery on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/GalleryIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "Galleries",
        "tags": [
          "Galleries"
        ],
        "operationId": "deleteGalleryFollow",
        "summary": "Unfollow a gallery",
        "description": "Unfollow a gallery on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/GalleryIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/locations/countries": {
      "get": {
        "x-category": "Locations",
        "tags": [
          "Locations"
        ],
        "operationId": "getLocationCountries",
        "summary": "Get a list of countries",
        "description": "Get a list of countries.",
        "parameters": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "short_name": {
                        "type": "string",
                        "example": "US"
                      },
                      "long_name": {
                        "type": "string",
                        "example": "United States"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations/regions": {
      "get": {
        "x-category": "Locations",
        "tags": [
          "Locations"
        ],
        "operationId": "getLocationRegions",
        "summary": "Get a list of regions",
        "description": "Get a list of regions.",
        "parameters": [
          {
            "name": "country_code",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "The country code to retrieve regions from.",
            "example": "US"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "short_name": {
                        "type": "string",
                        "example": "AL"
                      },
                      "long_name": {
                        "type": "string",
                        "example": "Alabama"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations/cities": {
      "get": {
        "x-category": "Locations",
        "tags": [
          "Locations"
        ],
        "operationId": "getLocationCities",
        "summary": "Get a list of cities",
        "description": "Get a list of cities.",
        "parameters": [
          {
            "name": "country_code",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "The country code to retrieve cities from.",
            "example": "US"
          },
          {
            "name": "region",
            "in": "query",
            "type": "string",
            "required": true,
            "description": "The region/state abbreviation to retrieve cities from.",
            "example": "WA"
          },
          {
            "name": "query",
            "in": "query",
            "type": "string",
            "description": "A query string to match the city name against.",
            "example": "Twin Peaks"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "Twin Peaks"
                      },
                      "location_id": {
                        "type": "string",
                        "example": "256170687-en"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/live/notifications": {
      "get": {
        "x-category": "Live",
        "tags": [
          "Live"
        ],
        "operationId": "getLiveNotifications",
        "summary": "Get live video subscription status",
        "description": "Get subscription status for upcoming live video notifications.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "isPartialUser": {
                  "type": "boolean",
                  "example": false
                },
                "status": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Live",
        "tags": [
          "Live"
        ],
        "operationId": "postLiveNotifications",
        "summary": "Subscribe to live video notifications",
        "description": "Subscribe to live video notifications on behalf of the authenticated user.",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "delete": {
        "x-category": "Live",
        "tags": [
          "Live"
        ],
        "operationId": "deleteLiveNotifications",
        "summary": "Unsubscribe from live video notifications",
        "description": "Unsubscribe from live video notifications on behalf of the authenticated user.",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/live/videos": {
      "get": {
        "x-category": "Live",
        "tags": [
          "Live"
        ],
        "operationId": "getLiveVideos",
        "summary": "Get live videos",
        "description": "Get a list of live videos.",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "type": "string",
            "example": "https://www.youtube.com/watch?v=pXrjMaVoTy0"
          },
          {
            "name": "schedule",
            "in": "query",
            "type": "string",
            "example": "upcoming",
            "enum": [
              "upcoming"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "videos": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LiveVideo"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/live/replays": {
      "get": {
        "x-category": "Live",
        "tags": [
          "Live"
        ],
        "operationId": "getLiveVideoReplays",
        "summary": "Get live video replays",
        "description": "Get a list of live video replays.",
        "parameters": [
          {
            "name": "creative_category",
            "in": "query",
            "type": "integer",
            "description": "A creative category ID to filter the results by.",
            "example": 44
          },
          {
            "name": "num",
            "in": "query",
            "type": "integer",
            "description": "The number of results to return per page.",
            "example": 5
          },
          {
            "name": "max_start_time",
            "in": "query",
            "type": "string",
            "description": "The date/time of the most recent replay.",
            "example": "2018-02-28 19:00:00"
          },
          {
            "name": "page",
            "in": "query",
            "type": "string",
            "description": "The result page number of the results.",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "videos": {
                  "type": "object",
                  "properties": {
                    "videos": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/LiveVideo"
                      }
                    },
                    "more_results": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/live/video/{videoId}": {
      "get": {
        "x-category": "Live",
        "tags": [
          "Live"
        ],
        "operationId": "getLiveVideo",
        "summary": "Get a live video",
        "description": "Get a live video.",
        "parameters": [
          {
            "$ref": "#/parameters/LiveVideoIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "videos": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LiveVideo"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "x-category": "Notifications",
        "tags": [
          "Notifications"
        ],
        "operationId": "getNotifications",
        "summary": "Get notifications",
        "description": "Get notifications for the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "notifications": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Notification"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/count": {
      "get": {
        "x-category": "Notifications",
        "tags": [
          "Notifications"
        ],
        "operationId": "getNotificationCount",
        "summary": "Get notification count",
        "description": "Get the total number of unread notifications for the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "example": 3
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{notificationId}": {
      "get": {
        "x-category": "Notifications",
        "tags": [
          "Notifications"
        ],
        "operationId": "getNotification",
        "summary": "Get a single notification",
        "description": "Get a single notification.",
        "parameters": [
          {
            "$ref": "#/parameters/NotificationIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "notification": {
                  "$ref": "#/definitions/Notification"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/projects/{projectId}/comments": {
      "get": {
        "x-category": "Notifications",
        "tags": [
          "Notifications"
        ],
        "operationId": "getProjectCommentNotifications",
        "summary": "Get project comment notifications",
        "description": "Get a list of project comment notifications for the specified project.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "notifications": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProjectCommentNotification"
                  }
                },
                "has_more": {
                  "$ref": "#/definitions/BinaryIntege"
                },
                "earliest_ts": {
                  "$ref": "#/definitions/UnixTimestamp"
                },
                "latest_ts": {
                  "$ref": "#/definitions/UnixTimestamp"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/notifications/projects/{projectId}/comments/count": {
      "get": {
        "x-category": "Notifications",
        "tags": [
          "Notifications"
        ],
        "operationId": "getProjectCommentNotificationCount",
        "summary": "Get project comment notification count",
        "description": "Get the total number of unread comment notifications for the specified project.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "example": 3
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/notifications/invitations": {
      "get": {
        "x-category": "Notifications",
        "tags": [
          "Notifications"
        ],
        "operationId": "getInvitationNotifications",
        "summary": "Get invitation notifications",
        "description": "Get invitation notifications for the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "invitations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Invitation"
                  }
                },
                "http_status": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/notifications/invitations/{invitationId}": {
      "put": {
        "x-category": "Notifications",
        "tags": [
          "Notifications"
        ],
        "operationId": "putInvitationNotification",
        "summary": "Accept an invitation",
        "description": "Accept an invitation on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/InvitationIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_status": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "Notifications",
        "tags": [
          "Notifications"
        ],
        "operationId": "deleteInvitationNotification",
        "summary": "Decline an invitation",
        "description": "Decline an invitation on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/InvitationIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_status": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/onboarding": {
      "post": {
        "x-category": "Onboarding",
        "tags": [
          "Onboarding"
        ],
        "operationId": "postOnboarding",
        "summary": "Complete onboarding",
        "description": "Complete onboarding on behalf of the authenticated user.",
        "parameters": [
          {
            "in": "formData",
            "type": "string",
            "name": "categories",
            "required": true,
            "description": "A pipe delimited string of integer category IDs.",
            "x-example": "123|456|789"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "properties": {
                "http_status": {
                  "type": "integer",
                  "example": 202
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400LegacyValidationErrors"
          }
        }
      }
    },
    "/project/editor": {
      "post": {
        "x-category": "Project Editor",
        "tags": [
          "Project Editor"
        ],
        "operationId": "postProjectEditor",
        "summary": "Create a project",
        "description": "Create a project.",
        "parameters": [
          {
            "name": "title",
            "in": "formData",
            "type": "string",
            "example": "Double R Diner Artwork"
          },
          {
            "name": "description",
            "in": "formData",
            "type": "string",
            "example": "All of my favorite artwork referencing the famous Double R Diner of Twin Peaks, WA."
          },
          {
            "name": "fields",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of creative fields.",
            "example": "Photography|UI Design"
          },
          {
            "name": "license",
            "in": "formData",
            "type": "string",
            "example": "no-use",
            "enum": [
              "no-use",
              "by-nc-nd",
              "by-nc-sa",
              "by-nc",
              "by-nd",
              "by-sa",
              "by"
            ]
          },
          {
            "name": "allow_comments",
            "in": "formData",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "background_color",
            "in": "formData",
            "type": "string",
            "description": "The background color for the project. A color hex code.",
            "example": "#FF00FF"
          },
          {
            "name": "mature_content",
            "in": "formData",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "published",
            "in": "formData",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "tags",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of search tags.",
            "example": "Pie|Coffee|Cherry"
          },
          {
            "name": "conceived_on",
            "in": "formData",
            "description": "Unix epoch time in seconds representing when the project was idealized.",
            "example": 1477505033
          },
          {
            "name": "tools",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of tool integer IDs.",
            "example": "123|456|789"
          },
          {
            "name": "credits",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of user integer IDs to credit on the project.",
            "example": "123|456|789"
          },
          {
            "name": "coowners",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of user integer IDs to be added as co-owners of the project.",
            "example": "123|456|789"
          },
          {
            "name": "teams",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of team integer IDs to associate with the project.",
            "example": "123|456|789"
          },
          {
            "name": "privacy",
            "in": "formData",
            "type": "string",
            "enum": [
              "private",
              "public",
              "custom",
              "portfolio"
            ]
          },
          {
            "name": "visible_to",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of user integer IDs to limit the project's visibility to.",
            "example": "123|456|789"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "project": {
                  "$ref": "#/definitions/Project"
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/{projectId}": {
      "patch": {
        "x-category": "Project Editor",
        "tags": [
          "Project Editor"
        ],
        "operationId": "patchProjectEditor",
        "summary": "Modify a project",
        "description": "Modify a project.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          },
          {
            "name": "title",
            "in": "formData",
            "type": "string",
            "example": "Double R Diner Artwork"
          },
          {
            "name": "description",
            "in": "formData",
            "type": "string",
            "example": "All of my favorite artwork referencing the famous Double R Diner of Twin Peaks, WA."
          },
          {
            "name": "fields",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of creative fields.",
            "example": "Photography|UI Design"
          },
          {
            "name": "license",
            "in": "formData",
            "type": "string",
            "example": "no-use",
            "enum": [
              "no-use",
              "by-nc-nd",
              "by-nc-sa",
              "by-nc",
              "by-nd",
              "by-sa",
              "by"
            ]
          },
          {
            "name": "allow_comments",
            "in": "formData",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "background_color",
            "in": "formData",
            "type": "string",
            "description": "The background color for the project. A color hex code.",
            "example": "#FF00FF"
          },
          {
            "name": "mature_content",
            "in": "formData",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "published",
            "in": "formData",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "tags",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of search tags.",
            "example": "Pie|Coffee|Cherry"
          },
          {
            "name": "conceived_on",
            "in": "formData",
            "description": "Unix epoch time in seconds representing when the project was idealized.",
            "example": 1477505033
          },
          {
            "name": "tools",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of tool integer IDs.",
            "example": "123|456|789"
          },
          {
            "name": "credits",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of user integer IDs to credit on the project.",
            "example": "123|456|789"
          },
          {
            "name": "coowners",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of user integer IDs to be added as co-owners of the project.",
            "example": "123|456|789"
          },
          {
            "name": "teams",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of team integer IDs to associate with the project.",
            "example": "123|456|789"
          },
          {
            "name": "privacy",
            "in": "formData",
            "type": "string",
            "enum": [
              "private",
              "public",
              "custom",
              "portfolio"
            ]
          },
          {
            "name": "visible_to",
            "in": "formData",
            "type": "string",
            "description": "A pipe delimited string of user integer IDs to limit the project's visibility to.",
            "example": "123|456|789"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "project": {
                  "$ref": "#/definitions/Project"
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/{projectId}/clone": {
      "post": {
        "x-category": "Project Editor",
        "tags": [
          "Project Editor"
        ],
        "operationId": "postProjectClone",
        "summary": "Clone an existing project",
        "description": "Clone an existing project.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "project": {
                  "$ref": "#/definitions/Project"
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/{projectId}/reorder": {
      "patch": {
        "x-category": "Project Editor",
        "tags": [
          "Project Editor"
        ],
        "operationId": "patchProjectReorder",
        "summary": "Reposition a project in the user's portfolio",
        "description": "Moves the position of the project in the user's portfolio, relative to another project.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          },
          {
            "name": "after_project_id",
            "in": "formData",
            "required": true,
            "type": "integer",
            "description": "The project ID after which this project should appear in the user's portfolio.",
            "example": 1029
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/{projectId}/modules": {
      "post": {
        "x-category": "Project Editor",
        "tags": [
          "Project Editor"
        ],
        "operationId": "postProjectModules",
        "summary": "Create a new project module",
        "description": "Create a new project module.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          },
          {
            "name": "type",
            "in": "formData",
            "type": "string",
            "example": "text",
            "required": true,
            "enum": [
              "image",
              "video",
              "audio",
              "embed",
              "text"
            ]
          },
          {
            "name": "original_width",
            "in": "formData",
            "type": "string",
            "description": "Applies only to embed modules. The original width of the embed object.",
            "example": "500px"
          },
          {
            "name": "original_height",
            "in": "formData",
            "type": "string",
            "description": "Applies only to embed modules. The original height of the embed object.",
            "example": "500px"
          },
          {
            "name": "alignment",
            "in": "formData",
            "type": "string",
            "example": "left",
            "enum": [
              "left",
              "right",
              "center"
            ]
          },
          {
            "name": "caption",
            "in": "formData",
            "type": "string",
            "example": "The best cherry pie in all of Washington."
          },
          {
            "name": "caption_alignment",
            "in": "formData",
            "type": "string",
            "example": "left",
            "enum": [
              "left",
              "right",
              "center"
            ]
          },
          {
            "name": "full_bleed",
            "in": "formData",
            "type": "integer",
            "description": "Display the module at full width without any padding. Module must be at least 1400px wide.",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "html",
            "in": "formData",
            "type": "string",
            "description": "Can be basic HTML or plain text. Required when creating a text or embed module.",
            "example": "Isn't it too dreamy?"
          },
          {
            "name": "source_url",
            "in": "formData",
            "type": "string",
            "description": "Source URL of the image/video in our temporary S3 bucket. Required for video, audio, and image modules.",
            "example": "https:/s3.amazonaws.com/be-network-sh-tmp-stage-ue1-a/0C8E7ACB-6D81-4D50-ADA9-777BF9CDE8B6.jpg"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "module": {
                  "$ref": "#/definitions/ProjectModule"
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/{projectId}/modules/{moduleId}": {
      "patch": {
        "x-category": "Project Editor",
        "tags": [
          "Project Editor"
        ],
        "operationId": "patchProjectModule",
        "summary": "Modify a project module",
        "description": "Modify a project module.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/ProjectModuleIdRequiredInPath"
          },
          {
            "name": "original_embed",
            "in": "formData",
            "type": "string",
            "example": "<iframe src='example.com/embed/123'></iframe>"
          },
          {
            "name": "original_width",
            "in": "formData",
            "type": "string",
            "description": "Applies only to embed modules. The original width of the embed object.",
            "example": "500px"
          },
          {
            "name": "original_height",
            "in": "formData",
            "type": "string",
            "description": "Applies only to embed modules. The original height of the embed object.",
            "example": "500px"
          },
          {
            "name": "width_unit",
            "type": "string",
            "description": "The unit of measurement used in the original_width key",
            "example": "px",
            "enum": [
              "px",
              "\\%"
            ]
          },
          {
            "name": "alignment",
            "in": "formData",
            "type": "string",
            "example": "left",
            "enum": [
              "left",
              "right",
              "center"
            ]
          },
          {
            "name": "caption",
            "in": "formData",
            "type": "string",
            "example": "The best cherry pie in all of Washington."
          },
          {
            "name": "caption_alignment",
            "in": "formData",
            "type": "string",
            "example": "left",
            "enum": [
              "left",
              "right",
              "center"
            ]
          },
          {
            "name": "full_bleed",
            "in": "formData",
            "type": "integer",
            "description": "Display the module at full width without any padding. Module must be at least 1400px wide.",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "html",
            "in": "formData",
            "type": "string",
            "description": "Can be basic HTML or plain text. Required when creating a text or embed module.",
            "example": "Isn't it too dreamy?"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "module": {
                  "$ref": "#/definitions/ProjectModule"
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "Project Editor",
        "tags": [
          "Project Editor"
        ],
        "operationId": "deleteProjectModule",
        "summary": "Delete a project module",
        "description": "Delete a project module.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/ProjectModuleIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "deleted": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/auto_sign_request": {
      "post": {
        "x-category": "Upload",
        "tags": [
          "Upload"
        ],
        "operationId": "postSinglePart",
        "summary": "Generate a signed S3 URL",
        "description": "Generates a signed URL and object key with which a client can upload binary data to our temporary S3 bucket. Data lives in this bucket for up to 24 hours.",
        "parameters": [
          {
            "name": "extension",
            "in": "formData",
            "required": true,
            "description": "The file extension of the asset to be uploaded.",
            "type": "string",
            "example": "jpg"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "$ref": "#/definitions/PresignedS3URI"
                },
                "expires_in": {
                  "$ref": "#/definitions/PresignedS3ExpiresIn"
                },
                "object": {
                  "$ref": "#/definitions/PresignedS3Object"
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/auto_sign_multipart/initiate": {
      "post": {
        "x-category": "Upload",
        "tags": [
          "Upload"
        ],
        "operationId": "postMultiPartInitiate",
        "summary": "Intitiate a multipart upload.",
        "description": "Initiate a multipart upload. This is the first step of the multipart upload flow.",
        "parameters": [
          {
            "name": "extension",
            "in": "formData",
            "required": true,
            "description": "The file extension of the asset to be uploaded.",
            "type": "string",
            "example": "jpg"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "upload_id": {
                  "type": "string",
                  "description": "The upload ID to be used in subsequent multipart upload flow requests.",
                  "example": "xzhrO21LSq_ToucpRH7J_71C2sdC8dDe6c8T_kdlPCRanysnet8MaaKORkymPbROn5QYFj0I_zmG7R3Br08w11dAM3pZG2yg9DRIu_JCe6zmO6xAGVMc26QcluNXZXe6"
                },
                "object": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "The S3 object key name generated for the asset to be uploaded.",
                      "example": "555d9e1d-ee32-45e0-97a9-7ab09d86c0ca.png"
                    }
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/auto_sign_multipart/upload": {
      "post": {
        "x-category": "Upload",
        "tags": [
          "Upload"
        ],
        "operationId": "postMultiPartUpload",
        "summary": "Generate a presigned multipart S3 URL",
        "description": "Generate a presigned multipart S3 URL.",
        "parameters": [
          {
            "$ref": "#/parameters/PresignedS3UploadId"
          },
          {
            "$ref": "#/parameters/PresignedS3ObjectKey"
          },
          {
            "name": "part_number",
            "in": "formData",
            "required": true,
            "type": "integer",
            "description": "The part number of the object to be uploaded. This should be 1 if it is the first part, 2 if it is the second, and so on. These numbers are used to reconstruct the object on AWS's side.",
            "example": 1
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "uri": {
                  "$ref": "#/definitions/PresignedS3URI"
                },
                "upload_id": {
                  "$ref": "#/defintions/PresignedS3UploadId"
                },
                "expires_in": {
                  "$ref": "#/definitions/PresignedS3ExpiresIn"
                },
                "object": {
                  "$ref": "#/definitions/PresignedS3Object"
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/auto_sign_multipart/complete": {
      "post": {
        "x-category": "Upload",
        "tags": [
          "Upload"
        ],
        "operationId": "postMultiPartComplete",
        "summary": "Complete a multipart upload",
        "description": "Completes a multipart upload after all parts have been uploaded.",
        "parameters": [
          {
            "$ref": "#/parameters/PresignedS3UploadId"
          },
          {
            "$ref": "#/parameters/PresignedS3ObjectKey"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "upload_id": {
                  "$ref": "#/defintions/PresignedS3UploadId"
                },
                "object": {
                  "$ref": "#/definitions/PresignedS3Object"
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      }
    },
    "/project/editor/auto_sign_multipart/abort": {
      "post": {
        "x-category": "Upload",
        "tags": [
          "Upload"
        ],
        "operationId": "postMultiPartAbort",
        "summary": "Abort an in progress multipart upload",
        "description": "Abort an in progress multipart upload.",
        "parameters": [
          {
            "$ref": "#/parameters/PresignedS3UploadId"
          },
          {
            "$ref": "#/parameters/PresignedS3ObjectKey"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "x-category": "Projects",
        "tags": [
          "Projects"
        ],
        "operationId": "getProjects",
        "summary": "Search and filter projects",
        "description": "Search and filter projects.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projects": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Project"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/drafts": {
      "get": {
        "x-category": "Projects",
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectDrafts",
        "summary": "Get project drafts",
        "description": "Get project drafts for the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projects": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Project"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "x-category": "Projects",
        "tags": [
          "Projects"
        ],
        "operationId": "getProject",
        "summary": "Get a single project",
        "description": "Get a single project.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "project": {
                  "$ref": "#/definitions/Project"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/comments": {
      "get": {
        "x-category": "Projects",
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectComments",
        "summary": "Get project comments",
        "description": "Get the comments associated with a specific project.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Comment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/collections": {
      "get": {
        "x-category": "Projects",
        "tags": [
          "Projects"
        ],
        "operationId": "getProjectCollections",
        "summary": "Get project collections",
        "description": "Get the collections associated with a specific project.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Collection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/view": {
      "post": {
        "x-category": "Projects",
        "tags": [
          "Projects"
        ],
        "operationId": "postProjectView",
        "summary": "View a project",
        "description": "View a project on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "appreciated": {
                  "type": "boolean",
                  "example": true
                },
                "has_user": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "appreciated_on": {
                  "$ref": "#/definitions/UnixTimestamp"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/appreciate": {
      "post": {
        "x-category": "Projects",
        "tags": [
          "Projects"
        ],
        "operationId": "postProjectAppreciation",
        "summary": "Appreciate a project",
        "description": "Appreciate a project on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "Projects",
        "tags": [
          "Projects"
        ],
        "operationId": "deleteProjectAppreciation",
        "summary": "Unappreciate a project",
        "description": "Unappreciate a project on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/credits/{userId}": {
      "delete": {
        "x-category": "Projects",
        "tags": [
          "Projects"
        ],
        "operationId": "deleteProjectAppreciation",
        "summary": "Delete a project credit",
        "description": "Remove a credited user from a project.",
        "parameters": [
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "403": {
            "$ref": "#/responses/403"
          }
        }
      }
    },
    "/report/{entityType}/{entityId}": {
      "post": {
        "x-category": "Moderation",
        "tags": [
          "Moderation"
        ],
        "operationId": "postModerationReport",
        "summary": "Report an entity",
        "description": "Report an entity as spam to be reviewed by the moderation team.",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The entity type to submit a report against.",
            "example": "project",
            "enum": [
              "project",
              "user",
              "segment"
            ]
          },
          {
            "name": "entityId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The entity ID to submit a report against.",
            "example": 12348
          },
          {
            "name": "reason",
            "in": "formData",
            "type": "integer",
            "required": true,
            "description": "The entity type to submit a report against. Acceptable values include 10 (copyright), 12 (offensive content), 14 (trademark infringement), 15 (adult content), 16 (privacy issue), and 18 (spam).",
            "example": 14,
            "enum": [
              10,
              12,
              14,
              15,
              18,
              16
            ]
          },
          {
            "name": "message",
            "in": "formData",
            "type": "string",
            "description": "An arbitrary message supplied by the user or application submitting the report.",
            "example": "This content is spam because XYZ."
          },
          {
            "name": "email",
            "in": "formData",
            "type": "string",
            "description": "If not supplying an access token, an email address belonging to the person reporting the offense.",
            "example": "behance-api@adobe.com"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      }
    },
    "/settings/browsing": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserBrowserSettings",
        "summary": "Get user browser settings",
        "description": "Get the authenticated user's browser settings.",
        "parameters": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "settings": {
                  "type": "object",
                  "properties": {
                    "safe": {
                      "$ref": "#/definitions/BinaryInteger"
                    }
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "postUserBrowserSettings",
        "summary": "Modify user browser settings",
        "description": "Modify the authenticated user's browser settings.",
        "parameters": [
          {
            "name": "safe",
            "in": "formData",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "x-category": "Tags",
        "tags": [
          "Tags"
        ],
        "operationId": "getTags",
        "summary": "Search for tags",
        "description": "Search for tags.",
        "parameters": [
          {
            "$ref": "#/parameters/TagCategory"
          },
          {
            "$ref": "#/parameters/SearchQueryString"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "$ref": "#/definitions/Tag"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Tags",
        "tags": [
          "Tags"
        ],
        "operationId": "postTags",
        "summary": "Create a tag",
        "description": "Create a tag.",
        "parameters": [
          {
            "name": "title",
            "type": "string",
            "in": "formData",
            "required": true,
            "example": "Pie"
          },
          {
            "name": "category",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "A pipe delimited string of integer tag category IDs.",
            "example": "2|4|5",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              9,
              10,
              11,
              12,
              13,
              14,
              15
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "tag": {
                  "$ref": "#/definitions/Tag"
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      }
    },
    "/talent/provisions": {
      "get": {
        "x-category": "Adobe Talent",
        "tags": [
          "Adobe Talent"
        ],
        "operationId": "getTalentProvisions",
        "summary": "Get talent provisioning",
        "description": "Retrieve the talent provisioning level for the authenticated user.",
        "parameters": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "level": {
                  "type": "string",
                  "example": "unlimited"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 401
                },
                "messages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "error"
                      },
                      "message": {
                        "type": "string",
                        "example": "You do not have access to Talent."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/talent/jobs": {
      "get": {
        "x-category": "Adobe Talent",
        "tags": [
          "Adobe Talent"
        ],
        "operationId": "getTalentJobSearches",
        "summary": "Get job searches",
        "description": "Retrieve the job searches owned by the authenticated user.",
        "parameters": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "counts": {
                  "type": "object",
                  "properties": {
                    "all": {
                      "type": "integer",
                      "example": 43
                    },
                    "active": {
                      "type": "integer",
                      "example": 13
                    },
                    "archived": {
                      "type": "integer",
                      "example": 2
                    }
                  }
                },
                "searches": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TalentSearchListing"
                  }
                },
                "matches": {
                  "type": "integer",
                  "example": 2
                },
                "timestamp": {
                  "$ref": "#/definitions/UnixTimestamp"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/talent/jobs/{jobId}/details": {
      "get": {
        "x-category": "Adobe Talent",
        "tags": [
          "Adobe Talent"
        ],
        "operationId": "getTalentJobListing",
        "summary": "Get job listing",
        "description": "Get a single job listing.",
        "parameters": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TalentSearchListing"
            }
          }
        }
      }
    },
    "/talent/jobs/{jobId}/candidates": {
      "get": {
        "x-category": "Adobe Talent",
        "tags": [
          "Adobe Talent"
        ],
        "operationId": "getTalentJobListingCandidates",
        "summary": "Get a list of candidates",
        "description": "Get a list of candidates for the specified job listing.",
        "parameters": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "counts": {
                  "type": "object",
                  "properties": {
                    "all": {
                      "type": "integer",
                      "example": 9
                    },
                    "recommend": {
                      "type": "integer",
                      "example": 9
                    },
                    "discover": {
                      "type": "integer",
                      "example": 0
                    },
                    "apply": {
                      "type": "integer",
                      "example": 0
                    },
                    "shortlist": {
                      "type": "integer",
                      "example": 0
                    }
                  }
                },
                "candidates": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "matches": {
                  "type": "integer",
                  "example": 9
                },
                "ordinal": {
                  "type": "integer",
                  "example": 9
                },
                "timestamp": {
                  "$ref": "#/definitions/UnixTimestamp"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/talent/jobs/{jobId}/recommendations": {
      "patch": {
        "x-category": "Adobe Talent",
        "tags": [
          "Adobe Talent"
        ],
        "operationId": "patchTalentJobListingRecommendations",
        "summary": "Get candidate recommendations",
        "description": "Get a list of recommended candidates.",
        "parameters": null,
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "example": 9
                },
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "has_more": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "getTeams",
        "summary": "Search and filter teams",
        "description": "Search and filter teams.",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "type": "string",
            "description": "The query to search against",
            "example": "Log%20Lady"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string",
            "example": "published_date",
            "enum": [
              "featured_date",
              "appreciations",
              "views",
              "followed",
              "created_date"
            ]
          },
          {
            "name": "sort_order",
            "in": "query",
            "type": "string",
            "description": "The direction in which the results should be returned",
            "example": "asc",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "The page number of results. A minimum value of 1 is required",
            "example": 12
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "description": "The number of results to return per page",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "teams": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Team"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "postTeams",
        "summary": "Create a team",
        "description": "Create a team.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamName"
          },
          {
            "$ref": "#/parameters/TeamSlug"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "team": {
                  "$ref": "#/definitions/Team"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}": {
      "get": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "getTeam",
        "summary": "Get a single team",
        "description": "Get a single team.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "team": {
                  "$ref": "#/definitions/Team"
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "deleteTeam",
        "summary": "Delete a team",
        "description": "Delete a team.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "redirect_url": {
                  "type": "string",
                  "example": "https://www.behance.net/laurapalmer"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "patch": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "patchTeam",
        "summary": "Update a team",
        "description": "Update a team.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/TeamName"
          },
          {
            "$ref": "#/parameters/TeamSlug"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "team": {
                  "$ref": "#/definitions/Team"
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/view": {
      "post": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "postTeamView",
        "summary": "Increment view count",
        "description": "Increment the view count for the specified team by one.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "valid": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/member_projects": {
      "get": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "getTeamMemberProjects",
        "summary": "Get projects",
        "description": "Get projects belonging to the specified team.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Project"
                  }
                },
                "count": {
                  "type": "integer",
                  "example": 4
                },
                "offset": {
                  "$ref": "#/definitions/UnixTimestamp"
                },
                "plural": {
                  "type": "boolean",
                  "example": false
                },
                "is_team": {
                  "type": "boolean",
                  "example": true
                },
                "endpoint": {
                  "type": "string",
                  "example": "/v2/teams/1842/projects"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/members": {
      "get": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "getTeamMembers",
        "summary": "Get team members",
        "description": "Get a list of all members in a team.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "postTeamMembers",
        "summary": "Add team members",
        "description": "Add members to a team with a role.",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/TeamRoleId"
          },
          {
            "name": "user_ids",
            "in": "formData",
            "type": "string",
            "description": "A comma delimited string of integer user IDs",
            "example": "2,3,4"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 202
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/members/{userId}": {
      "delete": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "deleteTeamMember",
        "summary": "Delete a team member",
        "description": "Delete a team member",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "example": 1
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "patch": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "patchTeamMember",
        "summary": "Modify a team member",
        "description": "Modify a team member's role or position in the member list.",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/TeamRoleId"
          },
          {
            "name": "after_id",
            "in": "formData",
            "description": "The integer ID of the user to place this user after in the member list",
            "type": "integer",
            "example": 234876
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/followers": {
      "get": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "getTeamFollowers",
        "summary": "Get team followers",
        "description": "Get a list of all followers of a team.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "is this a thing",
              "type": "object",
              "properties": {
                "0": {
                  "$ref": "#/definitions/User"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "postTeamFollowers",
        "summary": "Follow a team",
        "description": "Follow a team on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "deleteTeamFollowers",
        "summary": "Unfollow a team",
        "description": "Unfollow a team on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/projects": {
      "get": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "getTeamProjects",
        "summary": "Get team projects",
        "description": "Get a list of team projects.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projects": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Project"
                  }
                },
                "offset": {
                  "type": "integer",
                  "example": 4
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "postTeamProjects",
        "summary": "Add project(s) to a team",
        "description": "Add one or more projects to a team",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          },
          {
            "name": "project_id",
            "in": "formData",
            "type": "integer",
            "example": 18390
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_status": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/teams/{teamId}/project/{projectId}": {
      "delete": {
        "x-category": "Teams",
        "tags": [
          "Teams"
        ],
        "operationId": "TeamProjects",
        "summary": "Remove a project",
        "description": "Remove a project from the team.",
        "parameters": [
          {
            "$ref": "#/parameters/TeamIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/ProjectIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_status": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUsers",
        "summary": "Search and filter users",
        "description": "Search and filter users.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users",
          "Public Profile Service"
        ],
        "operationId": "getUser",
        "summary": "Get a single user",
        "description": "Get a single user.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getAuthenticatedUser",
        "summary": "Get the authenticated user",
        "description": "Get the authenticated user.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/livestreams": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserLivestreams",
        "summary": "Get live streams",
        "description": "Get a user's live streams.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "type": "string",
            "example": "live",
            "enum": [
              "live"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "The number of items to return.",
            "example": 4,
            "minimum": 1,
            "maximum": 10
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "livestreams": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LiveStream"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "postUserLivestreams",
        "summary": "Create a live stream",
        "description": "Create a live stream.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "livestream": {
                  "$ref": "#/definitions/LiveStream"
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/livestreams/{streamId}": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserLivestream",
        "summary": "Get a live stream",
        "description": "Get a live stream.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/LiveStreamIdRequiredInPath"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma delimited string of extra fields (\"lftoken\") to include with the stream.",
            "example": "lftoken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "livestream": {
                  "$ref": "#/definitions/LiveStream"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "patch": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "patchUserLivestream",
        "summary": "Modify a live stream",
        "description": "Modify a live stream.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/LiveStreamIdRequiredInPath"
          },
          {
            "name": "is_live",
            "in": "formData",
            "description": "Toggle the live stream on or off.",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "is_chat_on",
            "in": "formData",
            "description": "Toggle the live stream chat on or off.",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "object",
              "properties": {
                "livestream": {
                  "$ref": "#/definitions/LiveStream"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/projects": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserProjects",
        "summary": "Get a user's projects",
        "description": "Get a user's projects.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "projects": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Project"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/email_subscriptions/{emailId}": {
      "put": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "putUserEmailSubscription",
        "summary": "Subscribe to an email notification",
        "description": "Subscribe to an email notification",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/EmailIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "putUserEmailSubscription",
        "summary": "Unsubscribe from an email notification",
        "description": "Unsubscribe from an email notification",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/EmailIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/follow": {
      "post": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "postUserFollow",
        "summary": "Follow a user",
        "description": "Follow the user defined in the route path on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "429": {
            "$ref": "#/responses/429"
          }
        }
      },
      "delete": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "deleteUserFollow",
        "summary": "Unfollow a user",
        "description": "Unfollow the user defined in the route path on behalf of the authenticated user.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "429": {
            "$ref": "#/responses/429"
          }
        }
      }
    },
    "/users/{userId}/followers": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserFollowers",
        "summary": "Get a user's followers",
        "description": "Get a user's followers.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "followers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/following": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserFollowing",
        "summary": "Get a user's following list",
        "description": "Get a list of users the specified user is following.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "following": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/stats": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserStats",
        "summary": "Get a user's stats",
        "description": "Get a user's stats.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "stats": {
                  "$ref": "#/definitions/UserProfileStats"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/teams": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserTeams",
        "summary": "Get a user's teams.",
        "description": "Get a user's teams.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "teams": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Team"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/work_experience": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserWorkExperience",
        "summary": "Get a user's work experience",
        "description": "Get a user's work experience.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "work_experience": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WorkExperience"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/appreciations": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserAppreciations",
        "summary": "Get appreciated projects",
        "description": "Get a list of projects the user has appreciated.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "appreciations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "project": {
                        "$ref": "#/definitions/Project"
                      },
                      "timestamp": {
                        "type": "integer",
                        "example": 1477505931
                      }
                    }
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/collections": {
      "get": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "getUserCollections",
        "summary": "Get a user's collections",
        "description": "Get a list of the user's collections.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "collections": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Collection"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/flags/{flagName}": {
      "post": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "postUserFlag",
        "summary": "Enable a flag on a user",
        "description": "Enable a flag on a user",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "name": "flagName",
            "in": "path",
            "type": "string",
            "required": true,
            "x-example": "portfolio_upsell"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          }
        }
      }
    },
    "/users/{userId}/view": {
      "post": {
        "x-category": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "postUserView",
        "summary": "Increment profile view count",
        "description": "Increment the view count on the given user's profile.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          }
        }
      }
    },
    "/workinprogress/{userId}": {
      "get": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "getWIPStory",
        "summary": "Get a user's work in progress",
        "description": "Get a user's work in progress.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "story": {
                  "$ref": "#/definitions/WIPStory"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/workinprogress/{userId}/segments": {
      "get": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "getWIPSegments",
        "summary": "Get a work in progress' segments",
        "description": "Get a work in progress' segments.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "segments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WIPSegment"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "postWIPSegment",
        "summary": "Create a segment",
        "description": "Create a segment.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "name": "segment_source_url",
            "in": "formData",
            "required": true,
            "description": "A URL for the segment's media on our temporary S3 bucket.",
            "type": "string",
            "example": "https://s3.amazonaws.com/be-network-sh-tmp-stage-ue1-a/eab69d4e-d93c-43ec-9c15-7868af44bd84.jpeg"
          },
          {
            "name": "poster_source_url",
            "in": "formData",
            "required": true,
            "description": "A URL for the poster source (when media is a video).",
            "type": "string",
            "example": "https://s3.amazonaws.com/be-network-sh-tmp-stage-ue1-a/eab69d4e-d93c-43ec-9c15-7868af44bd84.jpeg"
          },
          {
            "name": "type",
            "in": "formData",
            "required": true,
            "description": "The type of media passed in the segment_source_url.",
            "type": "string",
            "example": "image",
            "enum": [
              "image",
              "video"
            ]
          },
          {
            "name": "duration",
            "in": "formData",
            "description": "The duration of media in milliseconds.",
            "type": "integer",
            "example": 1500,
            "minimum": 1000,
            "maximum": 15000
          },
          {
            "name": "is_mature",
            "in": "formData",
            "required": true,
            "description": "Mark this segment as containing mature content.",
            "type": "integer",
            "example": 1,
            "enum": [
              1,
              0
            ]
          },
          {
            "name": "project_id",
            "in": "formData",
            "required": true,
            "description": "An integer project ID related to the segment. The owner of the story must also be an owner of the project.",
            "type": "integer",
            "example": 1234
          },
          {
            "name": "annotation_source_url",
            "in": "formData",
            "required": true,
            "description": "A URL representing the transparent PNG annotation overlay.",
            "type": "string",
            "example": "https://s3.amazonaws.com/be-network-sh-tmp-stage-ue1-a/eab69d4e-d93c-43ec-9c15-7868af44bd84.jpeg"
          },
          {
            "name": "latitude",
            "in": "formData",
            "required": true,
            "description": "The latitude where the segment was created.",
            "type": "number",
            "example": 84.1209874
          },
          {
            "name": "longitude",
            "in": "formData",
            "required": true,
            "description": "The latitude where the segment was created.",
            "type": "number",
            "example": 84.1209874
          },
          {
            "name": "session_id",
            "in": "formData",
            "type": "string",
            "description": "Optional session ID for logging purposes."
          },
          {
            "name": "annotations",
            "in": "formData",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "example": "@behance"
                },
                "type": {
                  "type": "string",
                  "example": "mention",
                  "enum": [
                    "tag",
                    "mention",
                    "url"
                  ],
                  "href": {
                    "type": "string",
                    "example": "https://www.behance.net"
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "x": {
                          "type": "integer",
                          "example": 10
                        },
                        "y": {
                          "type": "integer",
                          "example": 50
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "segment": {
                  "$ref": "#/definitions/WIPSegment"
                },
                "http_code": {
                  "type": "integer",
                  "example": 201
                }
              }
            }
          }
        }
      }
    },
    "/workinprogress/{userId}/segments/{segmentId}": {
      "get": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "getWIPSegment",
        "summary": "Get a segment",
        "description": "Get a work in progress segment.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/SegmentIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "segment": {
                  "$ref": "#/definitions/WIPSegment"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "deleteWIPSegment",
        "summary": "Delete a segment",
        "description": "Delete a work in progress segment.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/SegmentIdRequiredInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/workinprogress/{userId}/segments/{segmentId}/reactions": {
      "get": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "getWIPSegmentReactions",
        "summary": "Get a segment's reactions",
        "description": "Get a list of reactions left on a segment.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/SegmentIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "reactions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WIPSegmentReaction"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/workinprogress/{userId}/segments/{segmentId}/reactions/{reactorId}": {
      "put": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "putWIPSegmentReaction",
        "summary": "React to a segment",
        "description": "React to a segment.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/SegmentIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/ReactorIdRequiredInPath"
          },
          {
            "name": "type",
            "in": "formData",
            "required": true,
            "type": "string",
            "example": "appreciate",
            "enum": [
              "appreciate",
              "laugh",
              "wow",
              "thinking"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "reaction": {
                  "$ref": "#/definitions/WIPSegmentReaction"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "delete": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "deleteWIPSegmentReaction",
        "summary": "Delete segment reaction",
        "description": "Delete a segment reaction.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/SegmentIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/ReactorIdRequiredInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/workinprogress/{userId}/segments/{segmentId}/views": {
      "get": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "getWIPStorySegmentViews",
        "summary": "Get segment views",
        "description": "Get a list of viewers of a segment. The owner of the segment is not included in the list. This list can only be viewed by the story owner.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/SegmentIdRequiredInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "views": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "$ref": "#/definitions/User"
                      },
                      "reaction": {
                        "$ref": "#/definitions/WIPSegmentReaction"
                      },
                      "date_viewed": {
                        "$ref": "#/definitions/UnixTimestamp"
                      }
                    }
                  }
                },
                "view_count": {
                  "type": "integer",
                  "example": 4
                },
                "reaction_counts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WIPSegmentReactionAggregate"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      },
      "post": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "postWIPStorySegmentViews",
        "summary": "Create segment view",
        "description": "Mark the segment viewed by the authenticated user and increment the segment's view count by one.",
        "parameters": [
          {
            "$ref": "#/parameters/UserIdRequiredInPath"
          },
          {
            "$ref": "#/parameters/SegmentIdRequiredInPath"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/workinprogress/filters": {
      "get": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "getWIPSegmentFilters",
        "summary": "Get a list of segment search filters",
        "description": "Search segments regardless of work in progress affiliation.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "filters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WIPSegmentFilter"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/workinprogress/list": {
      "get": {
        "x-category": "Work in Progress",
        "tags": [
          "Work in Progress"
        ],
        "operationId": "getWIPList",
        "summary": "Get a list of works in progress",
        "description": "Get a list of works in progress.",
        "parameters": [
          {
            "name": "list",
            "in": "query",
            "type": "string",
            "required": true,
            "example": "location",
            "enum": [
              "location",
              "tags",
              "following"
            ]
          },
          {
            "name": "start_time",
            "in": "query",
            "type": "integer",
            "description": "The earliest unix timestamp of the works in progress."
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "The number of segments to return."
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "The page of segments to return, also taking into account the start_time and limit parameters."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "stories": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/WIPStory"
                  }
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    },
    "/profile/editor": {
      "post": {
        "x-category": "Public Profile Service",
        "tags": [
          "Public Profile Service"
        ],
        "operationId": "postProfileEditor",
        "summary": "Update a user's public profile",
        "description": "Update a user's public profile.",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "first_name",
            "type": "string",
            "description": "The user's first name",
            "x-example": "Laura"
          },
          {
            "in": "formData",
            "name": "last_name",
            "type": "string",
            "description": "The user's last name",
            "x-example": "Palmer"
          },
          {
            "in": "formData",
            "name": "occupation",
            "type": "string",
            "description": "The user's occupation",
            "x-example": "Delivery Driver"
          },
          {
            "in": "formData",
            "name": "company",
            "type": "string",
            "description": "The user's company/employer",
            "x-example": "Meals on Wheels"
          },
          {
            "in": "formData",
            "name": "location_id",
            "type": "string",
            "description": "An ID representing the user's location",
            "x-example": 1
          },
          {
            "in": "formData",
            "name": "website",
            "type": "string",
            "description": "The user's website",
            "x-example": "https://www.behance.net"
          },
          {
            "in": "formData",
            "name": "city",
            "type": "string",
            "description": "The user's city of residence",
            "x-example": "Twin Peaks"
          },
          {
            "in": "formData",
            "name": "state",
            "type": "string",
            "description": "The user's state of residence",
            "x-example": "Washington"
          },
          {
            "in": "formData",
            "name": "country",
            "type": "string",
            "description": "The user's country of residence",
            "x-example": "United States"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "updated": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "x-example": 200
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400LegacyValidationErrors"
          }
        }
      }
    },
    "/profile/avatar": {
      "post": {
        "x-category": "Public Profile Service",
        "tags": [
          "Public Profile Service"
        ],
        "operationId": "postProfileAvatar",
        "summary": "Update a user's avatar",
        "description": "Update a user's avatar.",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "source_url",
            "type": "string",
            "description": "The S3 object URL of the image to upload. Min. width/height: 276px. Formats accepted: png, gif, jpg, jpeg\n",
            "x-example": "https://s3.amazonaws.com/be-network-dev-tmp-uploads/blue-october.jpg"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "updated": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "images": {
                  "$ref": "#/definitions/UserTeamAvatarRenditions"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400ValidationErrors"
          },
          "406": {
            "$ref": "#/responses/406"
          }
        }
      },
      "delete": {
        "x-category": "Public Profile Service",
        "tags": [
          "Public Profile Service"
        ],
        "operationId": "deleteProfileAvatar",
        "summary": "Delete a user's avatar",
        "description": "Delete a user's avatar.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "deleted": {
                  "$ref": "#/definitions/BinaryInteger"
                },
                "http_code": {
                  "type": "integer",
                  "example": 200
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ActivityFeed": {
      "type": "object",
      "properties": {
        "has_more": {
          "$ref": "#/definitions/BinaryInteger"
        },
        "earliest_ts": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "latest_ts": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "project": {
                "$ref": "#/definitions/Project"
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ActivityFeedAction"
                }
              }
            }
          }
        }
      }
    },
    "ActivityFeedAction": {
      "type": "object",
      "description": "An action taken by a user in the authenticated user's network. The two properties listed are the only ones guaranteed. Other properties may be included depending on the type of action taken.\n",
      "properties": {
        "created_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "type": {
          "$ref": "#/definitions/ActivityFeedActionType"
        }
      }
    },
    "ActivityFeedActionType": {
      "type": "string",
      "enum": [
        "project_appreciation",
        "project_publish",
        "project_edit",
        "project_comment",
        "project_collection_update",
        "project_feature",
        "project_team_update"
      ]
    },
    "BinaryInteger": {
      "type": "integer",
      "example": 1,
      "enum": [
        1,
        0
      ]
    },
    "BinaryIntegerDefaultFalse": {
      "type": "integer",
      "example": 0,
      "enum": [
        1,
        0
      ]
    },
    "Collection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 18680807
        },
        "title": {
          "type": "string",
          "example": "Best Coffee and Pie Spots"
        },
        "owners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "url": {
          "type": "string",
          "example": "https://www.behance.net/collection/18680807/Anthropology"
        },
        "stats": {
          "type": "object",
          "properties": {
            "items": {
              "type": "integer",
              "example": 3
            },
            "followers": {
              "type": "integer",
              "example": 324
            }
          }
        },
        "privacy": {
          "type": "string",
          "example": "public",
          "enum": [
            "public",
            "private"
          ]
        },
        "latest_projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "created_on": {
          "type": "integer",
          "example": 1392150183
        },
        "modified_on": {
          "type": "integer",
          "example": 1457730700
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 32496923
        },
        "comment": {
          "type": "string",
          "example": "Wow! Great work on this photo!"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "created_on": {
          "$ref": "#/definitions/UnixTimestamp"
        }
      }
    },
    "CuratedGallery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1
        },
        "label": {
          "type": "string",
          "example": "Illustration"
        },
        "description": {
          "type": "string",
          "example": "View illustration work in its many forms - including everything from sketchbooks to murals to character design and more."
        },
        "display_order": {
          "type": "integer",
          "example": 15
        },
        "url": {
          "type": "string",
          "example": "https://www.behance.net/galleries/1/Illustration"
        },
        "ribbon_1x": {
          "type": "string",
          "example": "https://a5.behance.net/a323229e9f1428edf6c1c0f39e97765ba78295da/img/galleries/icons/ribbons/1x/illustration.png?cb=264615658"
        },
        "ribbon_2x": {
          "type": "string",
          "example": "https://a5.behance.net/a323229e9f1428edf6c1c0f39e97765ba78295da/img/galleries/icons/ribbons/2x/illustration@2x.png?cb=264615658"
        },
        "ribbon_3x": {
          "type": "string",
          "example": "https://a5.behance.net/a323229e9f1428edf6c1c0f39e97765ba78295da/img/galleries/icons/ribbons/3x/illustration@3x.png?cb=264615658"
        },
        "ribbon_vector": {
          "type": "string",
          "example": "https://a5.behance.net/a323229e9f1428edf6c1c0f39e97765ba78295da/img/shared_icons/svg/ribbons/illustration.svg?cb=264615658"
        },
        "label_en": {
          "type": "string",
          "example": "Illustration"
        },
        "latest_projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "queues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureQueue"
          }
        }
      }
    },
    "CreativeField": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 109
        },
        "name": {
          "type": "string",
          "example": "Branding",
          "enum": [
            "Advertising",
            "Animation",
            "AR/VR",
            "Architecture",
            "Art Direction",
            "Automotive Design",
            "Branding",
            "Calligraphy",
            "Cartooning",
            "Character Design",
            "Cinematography",
            "Computer Animation",
            "Copywriting",
            "Costume Design",
            "Crafts",
            "Creative Direction",
            "Culinary Arts",
            "Digital Art",
            "Digital Photography",
            "Directing",
            "Drawing",
            "Editorial Design",
            "Engineering",
            "Entrepreneurship",
            "Exhibition Design",
            "Fashion",
            "Fashion Styling",
            "Film",
            "Fine Arts",
            "Furniture Design",
            "Game Design",
            "Graffiti",
            "Graphic Design",
            "Icon Design",
            "Illustration",
            "Industrial Design",
            "Information Architecture",
            "Interaction Design",
            "Interior Design",
            "Jewelry Design",
            "Journalism",
            "Landscape Design",
            "MakeUp Arts (MUA)",
            "Motion Graphics",
            "Music",
            "Packaging",
            "Painting",
            "Pattern Design",
            "Performing Arts",
            "Photography",
            "Photojournalism",
            "Print Design",
            "Product Design",
            "Programming",
            "Retouching",
            "Sculpting",
            "Set Design",
            "Sound Design",
            "Storyboarding",
            "Street Art",
            "Textile Design",
            "Toy Design",
            "Typography",
            "UI/UX",
            "Visual Effects",
            "Web Design",
            "Web Development",
            "Writing"
          ]
        }
      }
    },
    "Invitation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 26122459
        },
        "subject": {
          "type": "string",
          "example": "Laura Palmer invited you to own the project \"One Armed Man\""
        },
        "created_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "type": {
          "type": "string",
          "example": "project_owner"
        },
        "message": {
          "type": "string"
        },
        "other_user_id": {
          "type": "integer",
          "example": 22858969
        },
        "other_user": {
          "$ref": "#/definitions/User"
        },
        "project": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "LiveVideo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 1283
        },
        "etag": {
          "type": "string",
          "example": "m2yskBQFythfE4irbTIeOgYYfBU\\/x62Pi3AaMra2zDUiLaUxwY2ci60"
        },
        "title": {
          "type": "string",
          "example": "Black Lodge Live Stream"
        },
        "url": {
          "type": "string",
          "exampel": "https://www.youtube.com/watch?v=pXrjMaVoTy0"
        },
        "thumbnail_url": {
          "type": "string",
          "example": "https://mir-s3-cdn-cf.behance.net/project_modules/1400/39e57f33605049.56b11fee9c2c3.jpg"
        },
        "start_timestamp": {
          "type": "string",
          "example": "2017-07-13T22:00:00.000Z"
        },
        "duration_seconds": {
          "type": "integer",
          "example": 7003
        },
        "description": {
          "type": "string",
          "example": "BOB streaming live direct from above the gas station."
        },
        "created_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "modified_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "tools": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "example": "Adobe Photoshop"
              },
              "url": {
                "type": "string",
                "example": "https://behance.net/search?tools=9999"
              }
            }
          },
          "sections": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 3
              },
              "title": {
                "type": "string",
                "example": "My Video Section"
              },
              "content": {
                "type": "string",
                "example": "My video section's content."
              }
            }
          }
        }
      }
    },
    "LiveStream": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 94874
        },
        "video_id": {
          "type": "integer",
          "example": 23847
        },
        "stream_url": {
          "type": "string",
          "example": "rtmp://ep1-use1.bcovlive.io:1935/fb94abd85842453d8c9e25e8fa770333"
        },
        "chat": {
          "$ref": "#/definitions/LiveStreamChat"
        },
        "state": {
          "type": "string",
          "example": "WAITING",
          "enum": [
            "WAITING",
            "PROCESSING",
            "DISCONNECTED",
            "CANCELLING",
            "FINISHING",
            "CANCELLED",
            "FINISHED",
            "FAILED"
          ]
        },
        "viewers": {
          "type": "integer",
          "example": 4
        },
        "view_urls": {
          "type": "object",
          "properties": {
            "behance": {
              "type": "string",
              "example": "https://players.brightcove.net/5791558999001/default_default/index.html?videoId=5797214160001"
            }
          }
        },
        "created_on": {
          "type": "string",
          "example": "2018-06-13 18:22:51"
        },
        "modified_on": {
          "type": "string",
          "example": "2018-06-14 20:23:32"
        },
        "user_id": {
          "type": "integer",
          "example": 411538
        },
        "stream_id": {
          "type": "integer",
          "example": 42
        },
        "is_live": {
          "$ref": "#/definitions/BinaryInteger"
        }
      }
    },
    "LiveStreamChat": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": true
        },
        "network": {
          "type": "string",
          "example": "learn-live-int-0.fyre.co"
        },
        "site_id": {
          "type": "integer",
          "example": 36546
        },
        "article_id": {
          "type": "string",
          "example": "stream-42"
        },
        "collection_id": {
          "type": "integer",
          "example": 65321654
        }
      }
    },
    "Notification": {
      "type": "object",
      "discriminator": "action_key",
      "properties": {
        "id": {
          "type": "integer",
          "example": 6639765279
        },
        "created_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "read_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "action_id": {
          "type": "integer",
          "example": 2986787723
        },
        "action_key": {
          "type": "string",
          "example": "projectpublish"
        },
        "data": {
          "type": "object",
          "description": "The data pertaining to the notification. While \"project\" and \"actor\" are\nprovided as example object properties here, this key may also be \"false\"\nor contain other properties depending on the notification type.\n",
          "properties": {
            "project": {
              "$ref": "#/definitions/Project"
            },
            "actor": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "ProjectCommentNotification": {
      "allOf": [
        {
          "$ref": "#/definitions/Notification"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "description": null,
              "properties": {
                "project": {
                  "$ref": "#/definitions/Project"
                },
                "actor": {
                  "$ref": "#/definitions/User"
                },
                "comment": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 41209961
                    },
                    "entity_id": {
                      "type": "integer",
                      "description": "The ID of the project the comment was left on",
                      "example": 57977117
                    },
                    "comment": {
                      "type": "string",
                      "example": "Wow, nice work!"
                    },
                    "comment_markdown": {
                      "type": "string",
                      "example": "Wow, nice work!"
                    },
                    "owner": {
                      "type": "integer",
                      "description": "The ID of the user who left the comment",
                      "example": 88517841
                    },
                    "created_on": {
                      "$ref": "#/definitions/UnixTimestamp"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "ProjectTitle": {
      "type": "string",
      "example": "Double R Diner Artwork"
    },
    "ProjectDescription": {
      "type": "string",
      "example": "All of my favorite artwork referencing the famous Double R Diner of Twin Peaks, WA."
    },
    "ProjectModule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 20966149
        },
        "project_id": {
          "type": "integer",
          "example": 22581355
        },
        "type": {
          "type": "integer",
          "example": 11
        },
        "full_bleed": {
          "$ref": "#/definitions/BinaryInteger"
        },
        "alignment": {
          "type": "string",
          "example": "left",
          "enum": [
            "left",
            "right",
            "center"
          ]
        },
        "caption_alignment": {
          "type": "string",
          "example": "center",
          "enum": [
            "left",
            "right",
            "center"
          ]
        },
        "html": {
          "type": "string",
          "example": "<div>Cherry Pie & Coffee</div>"
        }
      }
    },
    "ProjectPrivacy": {
      "type": "string",
      "example": "public",
      "enum": [
        "public",
        "portfolio",
        "custom",
        "private"
      ]
    },
    "ProjectLicense": {
      "type": "string",
      "example": "no-use",
      "enum": [
        "no-use",
        "by-nc-nd",
        "by-nc-sa",
        "by-nc",
        "by-nd",
        "by-sa",
        "by"
      ]
    },
    "PresignedS3URI": {
      "type": "string",
      "description": "The presigned URI from Amazon. Make a PUT request with your asset's binary data to this URI.",
      "example": "https://s3.amazonaws.com/be-network-sh-tmp-stage-ue1-a/555d9e1d-ee32-45e0-97a9-7ab09d86c0ca.png?X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=XXXX&X-Amz-Date=20180814T014944Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86400&X-Amz-Signature=XXXXXX"
    },
    "PresignedS3ExpiresIn": {
      "type": "integer",
      "description": "Seconds until the signed URI expires.",
      "example": 86400
    },
    "PresignedS3Object": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The S3 object key name generated for the asset to be uploaded.",
          "example": "555d9e1d-ee32-45e0-97a9-7ab09d86c0ca.png"
        },
        "location": {
          "type": "string",
          "description": "The future location in S3 of the asset to be uploaded.",
          "example": "https://s3.amazonaws.com/be-network-sh-tmp-stage-ue1-a/555d9e1d-ee32-45e0-97a9-7ab09d86c0ca.png"
        }
      }
    },
    "PresignedS3UploadId": {
      "type": "string",
      "description": "The upload ID to be used in subsequent multipart upload flow requests.",
      "example": "xzhrO21LSq_ToucpRH7J_71C2sdC8dDe6c8T_kdlPCRanysnet8MaaKORkymPbROn5QYFj0I_zmG7R3Br08w11dAM3pZG2yg9DRIu_JCe6zmO6xAGVMc26QcluNXZXe6"
    },
    "SocialLink": {
      "type": "object",
      "properties": {
        "social_id": {
          "type": "integer",
          "example": 4
        },
        "url": {
          "type": "string",
          "example": "https://linkedin.com/laurapalmertwinpeaks"
        },
        "service_name": {
          "type": "string",
          "example": "LinkedIn"
        },
        "value": {
          "type": "string",
          "example": "laurapalmertwinpeaks"
        }
      }
    },
    "UserStats": {
      "type": "object",
      "properties": {
        "followers": {
          "type": "integer",
          "example": 161
        },
        "following": {
          "type": "integer",
          "example": 270
        },
        "appreciations": {
          "type": "integer",
          "example": 187
        },
        "views": {
          "type": "integer",
          "example": 2155
        },
        "comments": {
          "type": "integer",
          "example": 21
        },
        "team_members": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "UserProfileStats": {
      "type": "object",
      "properties": {
        "project_views": {
          "type": "integer",
          "example": 161
        },
        "project_appreciations": {
          "type": "integer",
          "example": 270
        },
        "project_comments": {
          "type": "integer",
          "example": 187
        },
        "profile_views": {
          "type": "integer",
          "example": 2155
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 4195259
        },
        "first_name": {
          "type": "string",
          "example": "Laura"
        },
        "last_name": {
          "type": "string",
          "example": "Palmer"
        },
        "username": {
          "type": "string",
          "example": "bobfan253"
        },
        "display_name": {
          "type": "string",
          "example": "Laura Palmer"
        },
        "city": {
          "type": "string",
          "example": "Twin Peaks"
        },
        "state": {
          "type": "string",
          "example": "Washington"
        },
        "country": {
          "type": "string",
          "example": "United States"
        },
        "location": {
          "type": "string",
          "example": "Twin Peaks, WA, USA"
        },
        "company": {
          "type": "string",
          "example": "Meals on Wheels"
        },
        "occupation": {
          "type": "string",
          "example": "Delivery Driver"
        },
        "created_on": {
          "type": "integer",
          "description": "The unix timestamp representing the creation of the user.",
          "example": 604281600
        },
        "url": {
          "type": "string",
          "example": "https://behance.net/bobfan253"
        },
        "images": {
          "$ref": "#/definitions/UserTeamAvatarRenditions"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Photography",
            "UI/UX",
            "Photojournalism"
          ]
        },
        "has_default_image": {
          "type": "integer",
          "enum": [
            1,
            0
          ]
        },
        "website": {
          "type": "string",
          "example": "http://twinpeaks.wikia.com/wiki/Laura_Palmer"
        },
        "stats": {
          "$ref": "#/definitions/UserStats"
        },
        "twitter": {
          "type": "string",
          "example": "@laurapalmertwinpeaks"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "sections": {
          "type": "object",
          "description": "An object with arbitrary string key/value pairs representing the sections that appear on a user's profile."
        },
        "social_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialLink"
          }
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 57977117
        },
        "name": {
          "$ref": "#/definitions/ProjectTitle"
        },
        "description": {
          "$ref": "#/definitions/ProjectDescription"
        },
        "published_on": {
          "type": "integer",
          "example": 1508564093
        },
        "created_on": {
          "type": "integer",
          "example": 1508564093
        },
        "modified_on": {
          "type": "integer",
          "example": 1508564093
        },
        "conveived_on": {
          "type": "integer",
          "example": 1508564093
        },
        "url": {
          "type": "string",
          "example": "https://www.behance.net/gallery/57977117/DailyUI-Challenge"
        },
        "privacy": {
          "$ref": "#/definitions/ProjectPrivacy"
        },
        "fields": {
          "type": "array",
          "example": [
            "Interaction Design",
            "UI/UX"
          ],
          "items": {
            "type": "string"
          }
        },
        "covers": {
          "type": "object",
          "properties": {
            "115": {
              "type": "string",
              "example": "https://mir-s3-cdn-cf.behance.net/projects/115/611d6a57977117.Y3JvcCw2NTAsNTA4LDIyMywxODM.png"
            },
            "202": {
              "type": "string",
              "example": "https://mir-s3-cdn-cf.behance.net/projects/202/611d6a57977117.Y3JvcCw2NTAsNTA4LDIyMywxODM.png"
            },
            "230": {
              "type": "string",
              "example": "https://mir-s3-cdn-cf.behance.net/projects/230/611d6a57977117.Y3JvcCw2NTAsNTA4LDIyMywxODM.png"
            },
            "404": {
              "type": "string",
              "example": "https://mir-s3-cdn-cf.behance.net/projects/404/611d6a57977117.Y3JvcCw2NTAsNTA4LDIyMywxODM.png"
            },
            "original": {
              "type": "string",
              "example": "https://mir-s3-cdn-cf.behance.net/projects/original/611d6a57977117.Y3JvcCw2NTAsNTA4LDIyMywxODM.png"
            }
          }
        },
        "mature_content": {
          "type": "integer",
          "enum": [
            0,
            1
          ]
        },
        "mature_access": {
          "$ref": "#/definitions/APIMatureAccess"
        },
        "owners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "stats": {
          "$ref": "#/definitions/ProjectStats"
        }
      }
    },
    "ProjectStats": {
      "type": "object",
      "properties": {
        "appreciations": {
          "type": "integer",
          "example": 187
        },
        "views": {
          "type": "integer",
          "example": 2155
        },
        "comments": {
          "type": "integer",
          "example": 21
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 7906
        },
        "title": {
          "type": "string",
          "example": "Diners"
        },
        "category": {
          "type": "string",
          "example": 2
        },
        "category_label": {
          "type": "string",
          "example": "Clients"
        },
        "category_id": {
          "type": "integer",
          "example": 2
        },
        "synonym": {
          "$ref": "#/definitions/TagSynonym"
        },
        "approved": {
          "$ref": "#/definitions/BinaryInteger"
        },
        "url": {
          "type": "string",
          "example": "/search?clients=7906"
        }
      }
    },
    "TagSynonym": {
      "type": "object",
      "nullable": true,
      "properties": {
        "tag_id": {
          "type": "integer",
          "example": 232169
        },
        "name": {
          "type": "string",
          "example": "muse"
        },
        "title": {
          "type": "string",
          "example": "Adobe Muse"
        },
        "url": {
          "type": "string",
          "example": "https://www.adobe.com/products/muse.html"
        },
        "download_url": {
          "type": "string",
          "example": "https://www.adobe.com/products/muse.html"
        },
        "gallery_url": {
          "type": "string",
          "example": "https://www.behance.net/search?tools=232169"
        },
        "authenticated": {
          "$ref": "#/definitions/BinaryInteger"
        },
        "type": {
          "type": "integer",
          "example": 1
        },
        "icon_url": {
          "type": "string",
          "example": "https://a5.behance.net/42e1629c39f96e979c22b3c77a0548e5863bb614/img/project/tools/1x/muse.png"
        },
        "icon_url_2x": {
          "type": "string",
          "example": "https://a5.behance.net/42e1629c39f96e979c22b3c77a0548e5863bb614/img/project/tools/2x/muse.png"
        }
      }
    },
    "TalentSearchListing": {
      "type": "object",
      "nullable": true,
      "properties": {
        "id": {
          "type": "integer",
          "example": 1234
        },
        "url": {
          "type": "string",
          "example": "https://www.behance.net/joblist/1234/Meals-On-Wheels"
        },
        "company": {
          "type": "string",
          "example": "Double R Diner"
        },
        "location": {
          "type": "string",
          "example": "Twin Peaks, WA, US"
        },
        "title": {
          "type": "string",
          "example": "Meals on Wheels Delivery Driver"
        },
        "created_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "posted_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "modified_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "expires_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "archived_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "allow_remote": {
          "$ref": "#/definitions/BinaryInteger"
        },
        "is_posted": {
          "type": "boolean"
        },
        "is_expired": {
          "type": "boolean"
        },
        "slug": {
          "type": "string",
          "example": "Meals-On-Wheels"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "fields": {
          "type": "object",
          "description": "An object where the keys are the creative field IDs and the values are the string representation."
        },
        "location_country": {
          "type": "string",
          "example": "United States"
        },
        "location_country_code": {
          "type": "string",
          "example": "US"
        },
        "location_stateprov": {
          "type": "string",
          "example": "Washington"
        },
        "location_stateprov_code": {
          "type": "string",
          "example": "WA"
        },
        "location_city": {
          "type": "string",
          "example": "Twin Peaks"
        },
        "_links": {
          "type": "object"
        },
        "announcements": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "anouncements_values": {
          "type": "object"
        },
        "type": {
          "type": "string",
          "example": "Full Time"
        },
        "is_full_time": {
          "type": "boolean"
        },
        "last_candidate_added_on": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "other_locations": {
          "type": "integer",
          "example": 1
        },
        "allow_apply": {
          "$ref": "#/definitions/UnixTimestamp"
        },
        "is_creator": {
          "type": "boolean"
        },
        "owners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "team": {
          "$ref": "#/definitions/Team"
        }
      }
    },
    "Team": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 7
        },
        "name": {
          "type": "string",
          "example": "Behance"
        },
        "url": {
          "type": "string",
          "example": "https://www.behance.net/behance"
        },
        "display_name": {
          "type": "string",
          "example": "Behance"
        },
        "website": {
          "type": "string",
          "example": "www.behance.net"
        },
        "slug": {
          "type": "string",
          "example": "behance"
        },
        "images": {
          "$ref": "#/definitions/UserTeamAvatarRenditions"
        },
        "location": {
          "type": "string",
          "example": "New York, NY, USA"
        },
        "location_link": {
          "type": "string",
          "example": "/search?content=teams&sort=appreciations&country=US&state=New+York&city=New+York"
        },
        "state": {
          "type": "string",
          "example": "New York"
        },
        "country": {
          "type": "string",
          "example": "United States"
        },
        "city": {
          "type": "string",
          "example": "New York"
        },
        "created_on": {
          "type": "integer",
          "example": 1396461800
        },
        "featured_on": {
          "type": "string",
          "example": "2012-11-22 08:00:03"
        },
        "is_following": {
          "type": "integer",
          "description": "Will be 1 if the authenticated user is following the team, and 0 if not.",
          "enum": [
            0,
            1
          ],
          "example": 1
        },
        "about": {
          "type": "string",
          "example": "Behance is the leading online platform to showcase & discover creative work."
        },
        "is_verified": {
          "type": "integer",
          "example": 1,
          "enum": [
            0,
            1
          ]
        },
        "invite_only": {
          "type": "integer",
          "example": 1,
          "enum": [
            0,
            1
          ]
        },
        "stats": {
          "$ref": "#/definitions/TeamStats"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "site": {
                "$ref": "#/definitions/FeatureQueueSite"
              }
            }
          }
        },
        "is_member": {
          "type": "integer",
          "description": "Will be 1 if the authenticated user is a member of the team, and 0 if not.",
          "example": 1,
          "enum": [
            1,
            0
          ]
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "social_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialLink"
          }
        }
      }
    },
    "TeamStats": {
      "type": "object",
      "properties": {
        "members": {
          "type": "integer",
          "example": 53
        },
        "projects": {
          "type": "integer",
          "example": 28
        },
        "wips": {
          "type": "integer",
          "example": 0
        },
        "followers": {
          "type": "integer",
          "example": 8786
        },
        "appreciations": {
          "type": "integer",
          "example": 19575
        },
        "views": {
          "type": "integer",
          "example": 328176
        },
        "hideFollowing": {
          "type": "boolean",
          "example": true
        },
        "jobs": {
          "type": "integer",
          "example": 5
        }
      }
    },
    "FeatureQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 10
        },
        "label": {
          "type": "string",
          "example": "Character Design"
        },
        "image": {
          "type": "string",
          "example": "https://mir-s3-cdn-cf.behance.net/projects/202/083f9d65574341.Y3JvcCwxNDY0LDExNDYsNjgsMA.jpg"
        }
      }
    },
    "FeatureQueueSite": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 34
        },
        "name": {
          "type": "string",
          "example": "AIGA Member Gallery"
        },
        "key": {
          "type": "string",
          "example": "aiga"
        },
        "icon": {
          "type": "string",
          "example": "https://a3.behance.net/img/galleries/icons/square/1x/aiga.png?cb=1828402081"
        },
        "url": {
          "type": "string",
          "example": "http://portfolios.aiga.org"
        },
        "domain": {
          "type": "string",
          "example": "portfolios.aiga.org"
        },
        "network_id": {
          "type": "integer",
          "example": 5
        },
        "ribbon": {
          "type": "object",
          "properties": {
            "image": {
              "type": "string",
              "example": "https://a3.behance.net/img/galleries/icons/ribbons/1x/aiga.png?cb=1828402081"
            },
            "image_2x": {
              "type": "string",
              "example": "https://a3.behance.net/img/galleries/icons/ribbons/2x/aiga@2x.png?cb=1828402081"
            }
          }
        },
        "featured_on": {
          "type": "string",
          "example": "2016-05-17 08:30:02"
        }
      }
    },
    "UserTeamAvatarRenditions": {
      "type": "object",
      "properties": {
        "50": {
          "type": "string",
          "example": "https://mir-s3-cdn-cf.behance.net/user/50/e3a10b4195259.58b5f60faac68.jpg"
        },
        "100": {
          "type": "string",
          "example": "https://mir-s3-cdn-cf.behance.net/user/100/e3a10b4195259.58b5f60faac68.jpg"
        },
        "115": {
          "type": "string",
          "example": "https://mir-s3-cdn-cf.behance.net/user/115/e3a10b4195259.58b5f60faac68.jpg"
        },
        "138": {
          "type": "string",
          "example": "https://mir-s3-cdn-cf.behance.net/user/138/e3a10b4195259.58b5f60faac68.jpg"
        },
        "230": {
          "type": "string",
          "example": "https://mir-s3-cdn-cf.behance.net/user/230/e3a10b4195259.58b5f60faac68.jpg"
        },
        "276": {
          "type": "string",
          "example": "https://mir-s3-cdn-cf.behance.net/user/276/e3a10b4195259.58b5f60faac68.jpg"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "LinkedIn"
        },
        "url": {
          "type": "string",
          "example": "https://linkedin.com/laurapalmertwinpeaks"
        }
      }
    },
    "WorkExperience": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "example": "Senior Product Designer"
        },
        "start_date": {
          "type": "string",
          "example": "11-2013"
        },
        "end_date": {
          "type": "string",
          "example": "01-2018"
        },
        "organization": {
          "type": "string",
          "example": "Behance"
        },
        "location": {
          "type": "string",
          "example": "New York, NY, USA"
        }
      }
    },
    "DimensionSet": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "example": 4000
        },
        "height": {
          "type": "integer",
          "example": 6000
        }
      }
    },
    "WIPSegment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 2311
        },
        "type": {
          "type": "string",
          "example": "image",
          "enum": [
            "image",
            "video"
          ]
        },
        "is_viewed": {
          "type": "boolean",
          "example": false,
          "description": "True if the authenticated user has viewed the segment, false otherwise."
        },
        "url": {
          "type": "string",
          "description": "A deep link to view the segment."
        },
        "short_url": {
          "type": "string",
          "description": "A shortened deep link to view the segment."
        },
        "original_dimensions": {
          "$ref": "#/definitions/DimensionSet"
        },
        "duration_millis": {
          "type": "integer",
          "example": 5000,
          "description": "The duration of the video or image in milliseconds."
        },
        "status": {
          "type": "string",
          "example": "ready",
          "enum": [
            "ready",
            "processing"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "mentions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "privacy": {
          "type": "string",
          "example": "public",
          "enum": [
            "public",
            "custom"
          ]
        },
        "privacy_users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "reactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WIPSegmentReactionAggregate"
          }
        },
        "view_count": {
          "type": "integer",
          "example": 384
        },
        "reaction_count": {
          "type": "integer",
          "example": 300
        },
        "viewer_reaction": {
          "$ref": "#/definitions/WIPSegmentReaction"
        },
        "posted_date": {
          "type": "integer",
          "example": 1511214918
        },
        "expiration_date": {
          "type": "integer",
          "example": 1511301318
        },
        "mature_content": {
          "type": "boolean",
          "example": false
        },
        "mature_access": {
          "$ref": "#/definitions/APIMatureAccess"
        },
        "media": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WIPSegmentMedia"
          }
        },
        "annotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WIPSegmentMedia"
          }
        },
        "poster": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "If the segment is of type video, this is the poster frame for the video. This field is null in the case of an image segment."
            }
          }
        },
        "annotation_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotationLink"
          }
        }
      }
    },
    "WIPStory": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer",
          "example": 416293
        },
        "type": {
          "type": "string",
          "example": "user",
          "enum": [
            "user",
            "location",
            "tag"
          ]
        },
        "type_id": {
          "type": "integer",
          "nullable": true
        },
        "entity_id": {
          "type": "integer",
          "nullable": true
        },
        "is_viewed": {
          "type": "boolean"
        },
        "is_ignored": {
          "type": "boolean"
        },
        "is_featured": {
          "type": "boolean"
        },
        "first_unviewed_segment_id": {
          "type": "integer",
          "example": 2938476
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "url": {
          "type": "string",
          "example": "https://www.behance.net"
        },
        "short_url": {
          "type": "string",
          "example": "https://be.net"
        },
        "segments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WIPSegment"
          }
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "WIPSegmentReaction": {
      "type": "object",
      "properties": {
        "segment_id": {
          "type": "integer",
          "example": 2311
        },
        "user_id": {
          "type": "integer",
          "example": 114746
        },
        "type": {
          "$ref": "#/definitions/ReactionType"
        },
        "created_on": {
          "type": "integer",
          "example": 1511216214
        },
        "modified_on": {
          "type": "integer",
          "example": 1511216214
        }
      }
    },
    "WIPSegmentReactionAggregate": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ReactionType"
        },
        "count": {
          "type": "integer",
          "example": 343
        }
      }
    },
    "ReactionType": {
      "type": "string",
      "example": "appreciate",
      "enum": [
        "appreciate",
        "laugh",
        "wow",
        "thinking"
      ]
    },
    "WIPSegmentMedia": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "source",
          "enum": [
            "source",
            "750",
            "1242",
            "1440"
          ]
        },
        "url": {
          "type": "string",
          "example": "https://mir-s3-cdn.s2stagehance.com/story_images/source/ea211b114746.5a134f45cfbb5.jpg"
        },
        "dimensions": {
          "$ref": "#/definitions/DimensionSet"
        }
      }
    },
    "AnnotationLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "example": 5325
        },
        "segment_id": {
          "type": "integer",
          "example": 2311
        },
        "type": {
          "type": "string",
          "example": "mention",
          "enum": [
            "mention",
            "tag",
            "url"
          ]
        },
        "content": {
          "type": "string",
          "example": "@tupacShakur"
        },
        "href": {
          "type": "string",
          "example": "https://net.s2stagehance.com/tupacShakur"
        },
        "coordinates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TwoDimensionalPoint"
          }
        }
      }
    },
    "TwoDimensionalPoint": {
      "type": "object",
      "properties": {
        "x": {
          "type": "integer",
          "example": 50
        },
        "y": {
          "type": "integer",
          "example": 200
        }
      }
    },
    "APIMatureAccess": {
      "type": "string",
      "example": "allowed",
      "enum": [
        "logged-out",
        "restricted-geo",
        "restricted-age",
        "restricted-safe",
        "allowed"
      ]
    },
    "WIPSegmentFilter": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Location"
        },
        "href": {
          "type": "string",
          "description": "A relative API endpoint to search segments from",
          "example": "/v2/story_segments?list=location&lat=38.3492&long=-91.2474903"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WIPSegmentFilter"
          }
        }
      }
    },
    "UnixTimestamp": {
      "type": "integer",
      "example": 1477505033,
      "description": "Unix epoch time in seconds."
    }
  },
  "parameters": {
    "CollectionIdRequiredInPath": {
      "name": "collectionId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "An integer collection ID.",
      "x-example": 64538241
    },
    "GalleryIdRequiredInPath": {
      "name": "galleryid",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "An integer gallery ID.",
      "x-example": 6
    },
    "LiveStreamIdRequiredInPath": {
      "name": "streamId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "An integer live stream ID.",
      "x-example": 4125259
    },
    "LiveVideoIdRequiredInPath": {
      "name": "videoId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "An integer live video ID.",
      "x-example": 64538241
    },
    "NetworkIdRequiredInPath": {
      "name": "networkId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "An integer network ID.",
      "x-example": 254
    },
    "NotificationIdRequiredInPath": {
      "name": "notificationId",
      "in": "path",
      "type": "integer",
      "required": true,
      "description": "An integer notification ID.",
      "x-example": 6145850827
    },
    "InvitationIdRequiredInPath": {
      "name": "invitationId",
      "in": "path",
      "type": "integer",
      "required": true,
      "description": "An integer invitation ID.",
      "x-example": 26122459
    },
    "EmailIdRequiredInPath": {
      "name": "emailId",
      "in": "path",
      "type": "string",
      "example": "project_comment_notification",
      "enum": [
        "project_comment_notification",
        "project_publish_notification",
        "direct_message_notification",
        "follower_notification",
        "hd_images_setting",
        "safe_browsing_setting",
        "project_invitation_notification",
        "collection_invitation_notification",
        "project_collection_add_notification",
        "summary_digest_notification",
        "mih_newsletter",
        "occasional_newsletter",
        "friend_joined_notification",
        "user_mention_notification",
        "activity_digest_notification",
        "request_team_to_member",
        "request_member_to_team",
        "request_project_to_team",
        "talent_search_recommendations",
        "talent_search_application",
        "user_added_to_discovered",
        "user_added_to_shortlist",
        "talent_search_shared",
        "talent_search_note",
        "talent_search_digest",
        "talent_search_archived",
        "live_upcoming_video",
        "recs_optout_setting"
      ]
    },
    "ProjectIdRequiredInPath": {
      "name": "projectId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "An integer project ID.",
      "x-example": 64538241
    },
    "ProjectModuleIdRequiredInPath": {
      "name": "moduleId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "An integer module ID.",
      "x-example": 64538241
    },
    "PresignedS3UploadId": {
      "name": "upload_id",
      "in": "formData",
      "required": true,
      "description": "The upload ID generated via the initate request.",
      "type": "string",
      "example": "xzhrO21LSq_ToucpRH7J_71C2sdC8dDe6c8T_kdlPCRanysnet8MaaKORkymPbROn5QYFj0I_zmG7R3Br08w11dAM3pZG2yg9DRIu_JCe6zmO6xAGVMc26QcluNXZXe6"
    },
    "PresignedS3ObjectKey": {
      "name": "object_key",
      "in": "formData",
      "required": true,
      "description": "The object key generated via the initiate request.",
      "type": "string",
      "example": "555d9e1d-ee32-45e0-97a9-7ab09d86c0ca.png"
    },
    "SegmentIdRequiredInPath": {
      "name": "segmentId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "A work in progress integer segment ID.",
      "x-example": 39393
    },
    "TagCategory": {
      "name": "category",
      "type": "string",
      "in": "query",
      "required": true,
      "description": "A pipe delimited string of integer tag category IDs.",
      "example": "2|4|5",
      "enum": [
        1,
        2,
        3,
        4,
        5,
        9,
        10,
        11,
        12,
        13,
        14,
        15
      ]
    },
    "TeamIdRequiredInPath": {
      "name": "teamId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "An integer team ID.",
      "x-example": 283311
    },
    "TeamName": {
      "name": "name",
      "in": "formData",
      "required": true,
      "type": "string",
      "description": "The name of the team to be created",
      "example": "The Owls"
    },
    "TeamSlug": {
      "name": "slug",
      "in": "formData",
      "required": true,
      "type": "string",
      "description": "The URL slug to represent the team",
      "example": "owls"
    },
    "TeamRoleId": {
      "name": "role_id",
      "in": "formData",
      "type": "integer",
      "description": "The role to apply to members. Use 1 for Admin and 2 for Member.",
      "example": 2,
      "enum": [
        1,
        2
      ]
    },
    "SearchQueryString": {
      "name": "q",
      "type": "string",
      "in": "query",
      "required": true,
      "description": "A search query string.",
      "example": "Pie"
    },
    "UserIdRequiredInPath": {
      "name": "userId",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "A user identifier. In the Users API, this can be either an integer legacy Behance user ID, string Adobe ID, or Behance username. Everywhere else, it must be a legacy Behance user ID.",
      "x-example": 4125259
    },
    "QueryLatitude": {
      "in": "query",
      "name": "latitude",
      "type": "number",
      "format": "float",
      "x-example": 53.2734
    },
    "QueryLongitude": {
      "in": "query",
      "name": "longitude",
      "type": "number",
      "format": "float",
      "x-example": -7.77832
    },
    "ReactorIdRequiredInPath": {
      "name": "reactorId",
      "in": "path",
      "required": true,
      "type": "integer",
      "description": "The ID of the user reacting to the segment.",
      "example": 1238476
    }
  },
  "responses": {
    "200": {
      "description": "OK",
      "schema": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "integer",
            "example": 1,
            "enum": [
              0,
              1
            ]
          },
          "http_code": {
            "type": "integer",
            "example": 200
          }
        }
      }
    },
    "400": {
      "description": "Bad Request",
      "schema": {
        "type": "object",
        "properties": {
          "valid": {
            "$ref": "#/definitions/BinaryIntegerDefaultFalse"
          },
          "http_code": {
            "type": "integer",
            "example": 400
          }
        }
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "Client or user not authorized for this action"
          }
        }
      }
    },
    "404": {
      "description": "Not Found",
      "schema": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "integer",
            "example": 0,
            "enum": [
              0,
              1
            ]
          },
          "http_code": {
            "type": "integer",
            "example": 404
          }
        }
      }
    },
    "406": {
      "description": "Not Acceptable",
      "schema": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "integer",
            "example": 0,
            "enum": [
              0,
              1
            ]
          },
          "http_code": {
            "type": "integer",
            "example": 406
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "error"
                },
                "message": {
                  "type": "string",
                  "example": "Cannot be empty"
                }
              }
            }
          }
        }
      }
    },
    "409": {
      "description": "Conflict",
      "schema": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "integer",
            "example": 0,
            "enum": [
              0,
              1
            ]
          },
          "http_code": {
            "type": "integer",
            "example": 409
          }
        }
      }
    },
    "429": {
      "description": "Too Many Requests",
      "schema": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "integer",
            "example": 0,
            "enum": [
              0,
              1
            ]
          },
          "http_code": {
            "type": "integer",
            "example": 429
          }
        }
      }
    },
    "400ValidationErrors": {
      "description": "Bad Request",
      "schema": {
        "type": "object",
        "properties": {
          "valid": {
            "$ref": "#/definitions/BinaryIntegerDefaultFalse"
          },
          "http_code": {
            "type": "integer",
            "example": 400
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "error"
                },
                "message": {
                  "type": "string",
                  "example": "Validation error message"
                }
              }
            }
          }
        }
      }
    },
    "400LegacyValidationErrors": {
      "description": "Bad Request",
      "schema": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "properties": {
              "property": {
                "type": "string",
                "example": "Property must be valid [property]"
              }
            }
          },
          "http_code": {
            "type": "integer",
            "example": 400
          }
        }
      }
    }
  }
}
